syntax = "proto3";

package api;
option go_package = "github.com/richardbaah/RouteFinder/src/api;api";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service ServiceDiscoveryManager{
    rpc Ping(google.protobuf.Empty) returns (PingReply) {} // health check for server
    rpc HeartBeat(HeartBeatRequest) returns (HeartBeatResponse) {} // sends out int every X ms and expects int + 1 back
    rpc RegisterService(RegisterServiceRequest) returns (Error) {} // add service - add multiple endpoints
    rpc AddInstance(AddInstanceRequest) returns (Error) {} // add endpoints - doesnt add service if doesnt exist
    rpc UnregisterService(RegisterServiceRequest) returns (Error) {} // remove endpoints - doesnt remove service if no endpoints
    rpc DeleteService(Service) returns (Error) {} // remove service and all its endpoints
    rpc RenameService(RenameServiceRequest) returns (Error) {} // rename service
    rpc ResolveService(ResolveRequest) returns (ResolveServiceResponse) {} // get all healthy endpoints of a service
    rpc Metrics(google.protobuf.Empty) returns (MetricsResponse) {} // get all services
}
message HeartBeatRequest{
    int32 message = 1;
}
message HeartBeatResponse{
    // message + 1 
    int32 messagePlusOne = 1;
}
message PingReply{
    string message = 1;
    google.protobuf.Timestamp timestamp = 2;
}

message RegisterServiceRequest {
    string service_name = 1;
    repeated ServiceEndpoint endpoints = 2;
    LoadBalance algo = 3;
}
message AddInstanceRequest {
    string service_name = 1;
    repeated ServiceEndpoint endpoints = 2;
}

message Error{
    int32 successCode = 1;
    string message = 2;
}

message ServiceEndpoint{
    string IP = 1;
    int32 port = 2;
}
message Service{
    string service_name  = 1;
}
message ResolveServiceResponse{
    repeated ServiceEndpoint endpoints = 1;
}
message ResolveRequest{
    string service_name = 1;
    bool resolveMany = 2; // if true return all endpoints else return one based on load balancing algo
}

message RenameServiceRequest{
    string old_service_name = 1;
    string new_service_name = 2;
}

enum LoadBalance {
  LOAD_BALANCE_NONE        = 0;
  LOAD_BALANCE_ROUND_ROBIN = 1;
  LOAD_BALANCE_URL_HASH    = 2;
  LOAD_BALANCE_RANDOM      = 3;
}

// returns all services and their endpoints and load balancing algo
message MetricsResponse{
    message serviceMetric{
        string service_name = 1;
        int32 num_endpoints = 2;
        LoadBalance algo = 3;
    }
    repeated serviceMetric services = 1;
    
}


/*
(pre-reqs)
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
export PATH="$(go env GOPATH)/bin:$PATH"


(To Compile this proto file)
protoc \
  --go_out=.                # generate Go types (messages, enums) into .
  --go_opt=paths=source_relative   # write each output file next to its .proto
  --go-grpc_out=.           # generate gRPC client/server interfaces into .
  --go-grpc_opt=paths=source_relative  # same “next to .proto” behavior
  smd.proto          # input .proto file


Run go get afterwards to add the new files to your go.mod
*/